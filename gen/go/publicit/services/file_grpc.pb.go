// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: publicit/services/file.proto

package services

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	// PostFile creates a new file object.
	PostFile(ctx context.Context, in *PostFileRequest, opts ...grpc.CallOption) (*PostFileResponse, error)
	// GetFiles returns a list of files.
	GetFiles(ctx context.Context, in *GetFilesRequest, opts ...grpc.CallOption) (*GetFilesResponse, error)
	// GetFile returns a file object.
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	// GetSignURLUpload generates a pre signed url from s3.
	GetSignURLUpload(ctx context.Context, in *GetSignURLUploadRequest, opts ...grpc.CallOption) (*GetSignURLUploadResponse, error)
	// GetSignURLUpload generates a pre signed url from s3.
	GetSignURLDownload(ctx context.Context, in *GetSignURLDownloadRequest, opts ...grpc.CallOption) (*GetSignURLDownloadResponse, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) PostFile(ctx context.Context, in *PostFileRequest, opts ...grpc.CallOption) (*PostFileResponse, error) {
	out := new(PostFileResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.FileService/PostFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFiles(ctx context.Context, in *GetFilesRequest, opts ...grpc.CallOption) (*GetFilesResponse, error) {
	out := new(GetFilesResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.FileService/GetFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.FileService/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetSignURLUpload(ctx context.Context, in *GetSignURLUploadRequest, opts ...grpc.CallOption) (*GetSignURLUploadResponse, error) {
	out := new(GetSignURLUploadResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.FileService/GetSignURLUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetSignURLDownload(ctx context.Context, in *GetSignURLDownloadRequest, opts ...grpc.CallOption) (*GetSignURLDownloadResponse, error) {
	out := new(GetSignURLDownloadResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.FileService/GetSignURLDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	// PostFile creates a new file object.
	PostFile(context.Context, *PostFileRequest) (*PostFileResponse, error)
	// GetFiles returns a list of files.
	GetFiles(context.Context, *GetFilesRequest) (*GetFilesResponse, error)
	// GetFile returns a file object.
	GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error)
	// GetSignURLUpload generates a pre signed url from s3.
	GetSignURLUpload(context.Context, *GetSignURLUploadRequest) (*GetSignURLUploadResponse, error)
	// GetSignURLUpload generates a pre signed url from s3.
	GetSignURLDownload(context.Context, *GetSignURLDownloadRequest) (*GetSignURLDownloadResponse, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) PostFile(context.Context, *PostFileRequest) (*PostFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostFile not implemented")
}
func (UnimplementedFileServiceServer) GetFiles(context.Context, *GetFilesRequest) (*GetFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedFileServiceServer) GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileServiceServer) GetSignURLUpload(context.Context, *GetSignURLUploadRequest) (*GetSignURLUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignURLUpload not implemented")
}
func (UnimplementedFileServiceServer) GetSignURLDownload(context.Context, *GetSignURLDownloadRequest) (*GetSignURLDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignURLDownload not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_PostFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).PostFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.FileService/PostFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).PostFile(ctx, req.(*PostFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.FileService/GetFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFiles(ctx, req.(*GetFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.FileService/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetSignURLUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignURLUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetSignURLUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.FileService/GetSignURLUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetSignURLUpload(ctx, req.(*GetSignURLUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetSignURLDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignURLDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetSignURLDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.FileService/GetSignURLDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetSignURLDownload(ctx, req.(*GetSignURLDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.publicit.services.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostFile",
			Handler:    _FileService_PostFile_Handler,
		},
		{
			MethodName: "GetFiles",
			Handler:    _FileService_GetFiles_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _FileService_GetFile_Handler,
		},
		{
			MethodName: "GetSignURLUpload",
			Handler:    _FileService_GetSignURLUpload_Handler,
		},
		{
			MethodName: "GetSignURLDownload",
			Handler:    _FileService_GetSignURLDownload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publicit/services/file.proto",
}

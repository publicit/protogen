// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: publicit/services/location.proto

package services

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocationServiceClient is the client API for LocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationServiceClient interface {
	CountryList(ctx context.Context, in *CountryListRequest, opts ...grpc.CallOption) (*CountryListResponse, error)
	CountryLoad(ctx context.Context, in *CountryLoadRequest, opts ...grpc.CallOption) (*CountryLoadResponse, error)
	StartLocationImport(ctx context.Context, in *StartLocationImportRequest, opts ...grpc.CallOption) (*StartLocationImportResponse, error)
	LocationImportList(ctx context.Context, in *LocationImportListRequest, opts ...grpc.CallOption) (*LocationImportListResponse, error)
}

type locationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationServiceClient(cc grpc.ClientConnInterface) LocationServiceClient {
	return &locationServiceClient{cc}
}

func (c *locationServiceClient) CountryList(ctx context.Context, in *CountryListRequest, opts ...grpc.CallOption) (*CountryListResponse, error) {
	out := new(CountryListResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.LocationService/CountryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) CountryLoad(ctx context.Context, in *CountryLoadRequest, opts ...grpc.CallOption) (*CountryLoadResponse, error) {
	out := new(CountryLoadResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.LocationService/CountryLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) StartLocationImport(ctx context.Context, in *StartLocationImportRequest, opts ...grpc.CallOption) (*StartLocationImportResponse, error) {
	out := new(StartLocationImportResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.LocationService/StartLocationImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) LocationImportList(ctx context.Context, in *LocationImportListRequest, opts ...grpc.CallOption) (*LocationImportListResponse, error) {
	out := new(LocationImportListResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.LocationService/LocationImportList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationServiceServer is the server API for LocationService service.
// All implementations must embed UnimplementedLocationServiceServer
// for forward compatibility
type LocationServiceServer interface {
	CountryList(context.Context, *CountryListRequest) (*CountryListResponse, error)
	CountryLoad(context.Context, *CountryLoadRequest) (*CountryLoadResponse, error)
	StartLocationImport(context.Context, *StartLocationImportRequest) (*StartLocationImportResponse, error)
	LocationImportList(context.Context, *LocationImportListRequest) (*LocationImportListResponse, error)
	mustEmbedUnimplementedLocationServiceServer()
}

// UnimplementedLocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLocationServiceServer struct {
}

func (UnimplementedLocationServiceServer) CountryList(context.Context, *CountryListRequest) (*CountryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountryList not implemented")
}
func (UnimplementedLocationServiceServer) CountryLoad(context.Context, *CountryLoadRequest) (*CountryLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountryLoad not implemented")
}
func (UnimplementedLocationServiceServer) StartLocationImport(context.Context, *StartLocationImportRequest) (*StartLocationImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartLocationImport not implemented")
}
func (UnimplementedLocationServiceServer) LocationImportList(context.Context, *LocationImportListRequest) (*LocationImportListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationImportList not implemented")
}
func (UnimplementedLocationServiceServer) mustEmbedUnimplementedLocationServiceServer() {}

// UnsafeLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationServiceServer will
// result in compilation errors.
type UnsafeLocationServiceServer interface {
	mustEmbedUnimplementedLocationServiceServer()
}

func RegisterLocationServiceServer(s grpc.ServiceRegistrar, srv LocationServiceServer) {
	s.RegisterService(&LocationService_ServiceDesc, srv)
}

func _LocationService_CountryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).CountryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.LocationService/CountryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).CountryList(ctx, req.(*CountryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_CountryLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).CountryLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.LocationService/CountryLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).CountryLoad(ctx, req.(*CountryLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_StartLocationImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartLocationImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).StartLocationImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.LocationService/StartLocationImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).StartLocationImport(ctx, req.(*StartLocationImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_LocationImportList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationImportListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).LocationImportList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.LocationService/LocationImportList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).LocationImportList(ctx, req.(*LocationImportListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationService_ServiceDesc is the grpc.ServiceDesc for LocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.publicit.services.LocationService",
	HandlerType: (*LocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountryList",
			Handler:    _LocationService_CountryList_Handler,
		},
		{
			MethodName: "CountryLoad",
			Handler:    _LocationService_CountryLoad_Handler,
		},
		{
			MethodName: "StartLocationImport",
			Handler:    _LocationService_StartLocationImport_Handler,
		},
		{
			MethodName: "LocationImportList",
			Handler:    _LocationService_LocationImportList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publicit/services/location.proto",
}

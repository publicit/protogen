// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: publicit/services/user.proto

package services

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	LoadUser(ctx context.Context, in *LoadUserRequest, opts ...grpc.CallOption) (*LoadUserResponse, error)
	ProfileSave(ctx context.Context, in *ProfileSaveRequest, opts ...grpc.CallOption) (*ProfileSaveResponse, error)
	ProfileLoad(ctx context.Context, in *ProfileLoadRequest, opts ...grpc.CallOption) (*ProfileLoadResponse, error)
	ProfileFileSave(ctx context.Context, in *ProfileFileSaveRequest, opts ...grpc.CallOption) (*ProfileFileSaveResponse, error)
	ProfileFilesLoad(ctx context.Context, in *ProfileFilesLoadRequest, opts ...grpc.CallOption) (*ProfileFilesLoadResponse, error)
	SupportedFileTypes(ctx context.Context, in *SupportedFileTypesRequest, opts ...grpc.CallOption) (*SupportedFileTypesResponse, error)
	ProfileFileLoad(ctx context.Context, in *ProfileFileLoadRequest, opts ...grpc.CallOption) (*ProfileFileLoadResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.UserService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.UserService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.UserService/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.UserService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoadUser(ctx context.Context, in *LoadUserRequest, opts ...grpc.CallOption) (*LoadUserResponse, error) {
	out := new(LoadUserResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.UserService/LoadUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ProfileSave(ctx context.Context, in *ProfileSaveRequest, opts ...grpc.CallOption) (*ProfileSaveResponse, error) {
	out := new(ProfileSaveResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.UserService/ProfileSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ProfileLoad(ctx context.Context, in *ProfileLoadRequest, opts ...grpc.CallOption) (*ProfileLoadResponse, error) {
	out := new(ProfileLoadResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.UserService/ProfileLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ProfileFileSave(ctx context.Context, in *ProfileFileSaveRequest, opts ...grpc.CallOption) (*ProfileFileSaveResponse, error) {
	out := new(ProfileFileSaveResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.UserService/ProfileFileSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ProfileFilesLoad(ctx context.Context, in *ProfileFilesLoadRequest, opts ...grpc.CallOption) (*ProfileFilesLoadResponse, error) {
	out := new(ProfileFilesLoadResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.UserService/ProfileFilesLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SupportedFileTypes(ctx context.Context, in *SupportedFileTypesRequest, opts ...grpc.CallOption) (*SupportedFileTypesResponse, error) {
	out := new(SupportedFileTypesResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.UserService/SupportedFileTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ProfileFileLoad(ctx context.Context, in *ProfileFileLoadRequest, opts ...grpc.CallOption) (*ProfileFileLoadResponse, error) {
	out := new(ProfileFileLoadResponse)
	err := c.cc.Invoke(ctx, "/protos.publicit.services.UserService/ProfileFileLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	LoadUser(context.Context, *LoadUserRequest) (*LoadUserResponse, error)
	ProfileSave(context.Context, *ProfileSaveRequest) (*ProfileSaveResponse, error)
	ProfileLoad(context.Context, *ProfileLoadRequest) (*ProfileLoadResponse, error)
	ProfileFileSave(context.Context, *ProfileFileSaveRequest) (*ProfileFileSaveResponse, error)
	ProfileFilesLoad(context.Context, *ProfileFilesLoadRequest) (*ProfileFilesLoadResponse, error)
	SupportedFileTypes(context.Context, *SupportedFileTypesRequest) (*SupportedFileTypesResponse, error)
	ProfileFileLoad(context.Context, *ProfileFileLoadRequest) (*ProfileFileLoadResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUserServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUserServiceServer) LoadUser(context.Context, *LoadUserRequest) (*LoadUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadUser not implemented")
}
func (UnimplementedUserServiceServer) ProfileSave(context.Context, *ProfileSaveRequest) (*ProfileSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileSave not implemented")
}
func (UnimplementedUserServiceServer) ProfileLoad(context.Context, *ProfileLoadRequest) (*ProfileLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileLoad not implemented")
}
func (UnimplementedUserServiceServer) ProfileFileSave(context.Context, *ProfileFileSaveRequest) (*ProfileFileSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileFileSave not implemented")
}
func (UnimplementedUserServiceServer) ProfileFilesLoad(context.Context, *ProfileFilesLoadRequest) (*ProfileFilesLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileFilesLoad not implemented")
}
func (UnimplementedUserServiceServer) SupportedFileTypes(context.Context, *SupportedFileTypesRequest) (*SupportedFileTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupportedFileTypes not implemented")
}
func (UnimplementedUserServiceServer) ProfileFileLoad(context.Context, *ProfileFileLoadRequest) (*ProfileFileLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileFileLoad not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.UserService/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.UserService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.UserService/LoadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoadUser(ctx, req.(*LoadUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ProfileSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ProfileSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.UserService/ProfileSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ProfileSave(ctx, req.(*ProfileSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ProfileLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ProfileLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.UserService/ProfileLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ProfileLoad(ctx, req.(*ProfileLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ProfileFileSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileFileSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ProfileFileSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.UserService/ProfileFileSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ProfileFileSave(ctx, req.(*ProfileFileSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ProfileFilesLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileFilesLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ProfileFilesLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.UserService/ProfileFilesLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ProfileFilesLoad(ctx, req.(*ProfileFilesLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SupportedFileTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedFileTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SupportedFileTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.UserService/SupportedFileTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SupportedFileTypes(ctx, req.(*SupportedFileTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ProfileFileLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileFileLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ProfileFileLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.publicit.services.UserService/ProfileFileLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ProfileFileLoad(ctx, req.(*ProfileFileLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.publicit.services.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UserService_LoginUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UserService_ListUsers_Handler,
		},
		{
			MethodName: "LoadUser",
			Handler:    _UserService_LoadUser_Handler,
		},
		{
			MethodName: "ProfileSave",
			Handler:    _UserService_ProfileSave_Handler,
		},
		{
			MethodName: "ProfileLoad",
			Handler:    _UserService_ProfileLoad_Handler,
		},
		{
			MethodName: "ProfileFileSave",
			Handler:    _UserService_ProfileFileSave_Handler,
		},
		{
			MethodName: "ProfileFilesLoad",
			Handler:    _UserService_ProfileFilesLoad_Handler,
		},
		{
			MethodName: "SupportedFileTypes",
			Handler:    _UserService_SupportedFileTypes_Handler,
		},
		{
			MethodName: "ProfileFileLoad",
			Handler:    _UserService_ProfileFileLoad_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publicit/services/user.proto",
}

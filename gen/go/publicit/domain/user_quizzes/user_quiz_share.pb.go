// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: publicit/domain/user_quizzes/user_quiz_share.proto

package user_quizzes

import (
	reflect "reflect"
	sync "sync"

	quizzes "github.com/publicit/protogen/gen/go/publicit/domain/quizzes"
	users "github.com/publicit/protogen/gen/go/publicit/domain/users"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserQuizShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ExpiresAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	UsedAt        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=used_at,json=usedAt,proto3" json:"used_at,omitempty"`
	UserReferred  *users.User            `protobuf:"bytes,6,opt,name=user_referred,json=userReferred,proto3" json:"user_referred,omitempty"`
	UserShared    *users.User            `protobuf:"bytes,7,opt,name=user_shared,json=userShared,proto3" json:"user_shared,omitempty"`
	Quiz          *quizzes.Quiz          `protobuf:"bytes,8,opt,name=quiz,proto3" json:"quiz,omitempty"`
	ReferredEmail string                 `protobuf:"bytes,9,opt,name=referred_email,json=referredEmail,proto3" json:"referred_email,omitempty"`
}

func (x *UserQuizShare) Reset() {
	*x = UserQuizShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicit_domain_user_quizzes_user_quiz_share_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserQuizShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserQuizShare) ProtoMessage() {}

func (x *UserQuizShare) ProtoReflect() protoreflect.Message {
	mi := &file_publicit_domain_user_quizzes_user_quiz_share_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserQuizShare.ProtoReflect.Descriptor instead.
func (*UserQuizShare) Descriptor() ([]byte, []int) {
	return file_publicit_domain_user_quizzes_user_quiz_share_proto_rawDescGZIP(), []int{0}
}

func (x *UserQuizShare) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserQuizShare) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserQuizShare) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserQuizShare) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *UserQuizShare) GetUsedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UsedAt
	}
	return nil
}

func (x *UserQuizShare) GetUserReferred() *users.User {
	if x != nil {
		return x.UserReferred
	}
	return nil
}

func (x *UserQuizShare) GetUserShared() *users.User {
	if x != nil {
		return x.UserShared
	}
	return nil
}

func (x *UserQuizShare) GetQuiz() *quizzes.Quiz {
	if x != nil {
		return x.Quiz
	}
	return nil
}

func (x *UserQuizShare) GetReferredEmail() string {
	if x != nil {
		return x.ReferredEmail
	}
	return ""
}

var File_publicit_domain_user_quizzes_user_quiz_share_proto protoreflect.FileDescriptor

var file_publicit_domain_user_quizzes_user_quiz_share_proto_rawDesc = []byte{
	0x0a, 0x32, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x7a,
	0x65, 0x73, 0x2f, 0x71, 0x75, 0x69, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xcf, 0x03, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x33, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x75, 0x73, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x12, 0x38, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x2e,
	0x51, 0x75, 0x69, 0x7a, 0x52, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x42, 0xaa, 0x02, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x42, 0x12, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x69,
	0x7a, 0x7a, 0x65, 0x73, 0xa2, 0x02, 0x04, 0x50, 0x50, 0x44, 0x55, 0xaa, 0x02, 0x22, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73,
	0xca, 0x02, 0x22, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x55, 0x73, 0x65, 0x72, 0x71, 0x75,
	0x69, 0x7a, 0x7a, 0x65, 0x73, 0xe2, 0x02, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5c, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5c, 0x55,
	0x73, 0x65, 0x72, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x25, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x3a,
	0x3a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x3a, 0x3a, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x3a, 0x3a, 0x55, 0x73, 0x65, 0x72, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_publicit_domain_user_quizzes_user_quiz_share_proto_rawDescOnce sync.Once
	file_publicit_domain_user_quizzes_user_quiz_share_proto_rawDescData = file_publicit_domain_user_quizzes_user_quiz_share_proto_rawDesc
)

func file_publicit_domain_user_quizzes_user_quiz_share_proto_rawDescGZIP() []byte {
	file_publicit_domain_user_quizzes_user_quiz_share_proto_rawDescOnce.Do(func() {
		file_publicit_domain_user_quizzes_user_quiz_share_proto_rawDescData = protoimpl.X.CompressGZIP(file_publicit_domain_user_quizzes_user_quiz_share_proto_rawDescData)
	})
	return file_publicit_domain_user_quizzes_user_quiz_share_proto_rawDescData
}

var file_publicit_domain_user_quizzes_user_quiz_share_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_publicit_domain_user_quizzes_user_quiz_share_proto_goTypes = []interface{}{
	(*UserQuizShare)(nil),         // 0: protos.publicit.domain.userquizzes.UserQuizShare
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
	(*users.User)(nil),            // 2: protos.publicit.domain.users.User
	(*quizzes.Quiz)(nil),          // 3: protos.publicit.domain.quizzes.Quiz
}
var file_publicit_domain_user_quizzes_user_quiz_share_proto_depIdxs = []int32{
	1, // 0: protos.publicit.domain.userquizzes.UserQuizShare.created_at:type_name -> google.protobuf.Timestamp
	1, // 1: protos.publicit.domain.userquizzes.UserQuizShare.expires_at:type_name -> google.protobuf.Timestamp
	1, // 2: protos.publicit.domain.userquizzes.UserQuizShare.used_at:type_name -> google.protobuf.Timestamp
	2, // 3: protos.publicit.domain.userquizzes.UserQuizShare.user_referred:type_name -> protos.publicit.domain.users.User
	2, // 4: protos.publicit.domain.userquizzes.UserQuizShare.user_shared:type_name -> protos.publicit.domain.users.User
	3, // 5: protos.publicit.domain.userquizzes.UserQuizShare.quiz:type_name -> protos.publicit.domain.quizzes.Quiz
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_publicit_domain_user_quizzes_user_quiz_share_proto_init() }
func file_publicit_domain_user_quizzes_user_quiz_share_proto_init() {
	if File_publicit_domain_user_quizzes_user_quiz_share_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_publicit_domain_user_quizzes_user_quiz_share_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserQuizShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_publicit_domain_user_quizzes_user_quiz_share_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_publicit_domain_user_quizzes_user_quiz_share_proto_goTypes,
		DependencyIndexes: file_publicit_domain_user_quizzes_user_quiz_share_proto_depIdxs,
		MessageInfos:      file_publicit_domain_user_quizzes_user_quiz_share_proto_msgTypes,
	}.Build()
	File_publicit_domain_user_quizzes_user_quiz_share_proto = out.File
	file_publicit_domain_user_quizzes_user_quiz_share_proto_rawDesc = nil
	file_publicit_domain_user_quizzes_user_quiz_share_proto_goTypes = nil
	file_publicit_domain_user_quizzes_user_quiz_share_proto_depIdxs = nil
}
